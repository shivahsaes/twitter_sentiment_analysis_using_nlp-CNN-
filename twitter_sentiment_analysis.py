# -*- coding: utf-8 -*-
"""Twitter_sentiment_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X_SIbtccsMyoFyS8e90DozccO0W_Tm3q

_Twitter Sentiment Analysis_

Importing Libraries
"""

import tensorflow as tf
import pandas as pd
import numpy as np
import math
import re
from bs4 import BeautifulSoup
import tensorflow_datasets as tfds
from tensorflow.keras import layers

"""Loading dataset

http://cs.stanford.edu/people/alecmgo/trainingandtestdata.zip

Get the dataset file from the above link and upload to google drive
"""

import zipfile
from google.colab import drive
zip_ref=zipfile.ZipFile("/content/drive/My Drive/trainingandtestdata.zip",'r')
zip_ref.extractall()
zip_ref.close()

#our data set has no headers.To add headers
Cols=["Sentiment","id","date","query","user","text"]

train_data=pd.read_csv("/content/training.csv", header=None, names=Cols, engine="python", encoding="latin1")
train_data.head()

test_data=pd.read_csv("/content/testdata.csv", header=None, names=Cols, engine="python", encoding="latin1")
 
test_data.head()

"""Data Preprocessing

1.Removing all useless columns
"""

train_data.drop(["id", "date", "query", "user"],axis=1,inplace=True)

train_data.head()

test_data.drop(["id", "date", "query", "user"],axis=1,inplace=True)

test_data.head()

"""2.Function for cleaning all tweets"""

def clean_tweet(tweet):
    tweet = BeautifulSoup(tweet, "lxml").get_text()
    # Removing the @
    tweet = re.sub(r"@[A-Za-z0-9]+", ' ', tweet)
    # Removing the URL links
    tweet = re.sub(r"https?://[A-Za-z0-9./]+", ' ', tweet)
    # Keeping only letters
    tweet = re.sub(r"[^a-zA-Z.!?']", ' ', tweet)
    # Removing additional whitespaces
    tweet = re.sub(r" +", ' ', tweet)
    return tweet

clean_data= [clean_tweet(tweet) for tweet in train_data.text]

"""3.Checking the labels of sentiment values and changing to 0 and 1 if needed"""

data_labels=train_data.Sentiment.values
set(data_labels)

data_labels[data_labels == 4] = 1

set(data_labels)

"""4.Tokenizing"""

tokenizer = tfds.features.text.SubwordTextEncoder.build_from_corpus(
    clean_data, target_vocab_size=2**16
)
 
data_inputs = [tokenizer.encode(sentence) for sentence in clean_data]

"""5.Padding"""

MAX_LEN = max([len(sentence) for sentence in data_inputs])
data_inputs = tf.keras.preprocessing.sequence.pad_sequences(data_inputs,
                                                            value=0,
                                                            padding="post",
                                                            maxlen=MAX_LEN)

"""Splitting the test and train set"""

test_idx = np.random.randint(0, 800000, 8000)
test_idx = np.concatenate((test_idx, test_idx+800000))

test_inputs = data_inputs[test_idx]
test_labels = data_labels[test_idx]
train_inputs = np.delete(data_inputs, test_idx, axis=0)
train_labels = np.delete(data_labels, test_idx)

"""Creating the model for DCNN"""

class DCNN(tf.keras.Model):
    
    def __init__(self,
                 vocab_size,
                 emb_dim=128,
                 nb_filters=50,
                 FFN_units=512,
                 nb_classes=2,
                 dropout_rate=0.1,
                 training=False,
                 name="dcnn"):
        super(DCNN, self).__init__(name=name)
        
        self.embedding = layers.Embedding(vocab_size,
                                          emb_dim)
        self.bigram = layers.Conv1D(filters=nb_filters,
                                    kernel_size=2,
                                    padding="valid",
                                    activation="relu")
        self.trigram = layers.Conv1D(filters=nb_filters,
                                     kernel_size=3,
                                     padding="valid",
                                     activation="relu")
        self.fourgram = layers.Conv1D(filters=nb_filters,
                                      kernel_size=4,
                                      padding="valid",
                                      activation="relu")
        self.pool = layers.GlobalMaxPool1D() # no training variable so we can
                                             # use the same layer for each
                                             # pooling step
        self.dense_1 = layers.Dense(units=FFN_units, activation="relu")
        self.dropout = layers.Dropout(rate=dropout_rate)
        if nb_classes == 2:
            self.last_dense = layers.Dense(units=1,
                                           activation="sigmoid")
        else:
            self.last_dense = layers.Dense(units=nb_classes,
                                           activation="softmax")
    
    def call(self, inputs, training):
        x = self.embedding(inputs)
        x_1 = self.bigram(x)
        x_1 = self.pool(x_1)
        x_2 = self.trigram(x)
        x_2 = self.pool(x_2)
        x_3 = self.fourgram(x)
        x_3 = self.pool(x_3)
        
        merged = tf.concat([x_1, x_2, x_3], axis=-1) # (batch_size, 3 * nb_filters)
        merged = self.dense_1(merged)
        merged = self.dropout(merged, training)
        output = self.last_dense(merged)
        
        return output

"""Configurations"""

VOCAB_SIZE = tokenizer.vocab_size
 
EMB_DIM = 200
NB_FILTERS = 100
FFN_UNITS = 256
NB_CLASSES = 2#len(set(train_labels))
 
DROPOUT_RATE = 0.2
 
BATCH_SIZE = 32
NB_EPOCHS = 5

"""Training"""

Dcnn = DCNN(vocab_size=VOCAB_SIZE,
            emb_dim=EMB_DIM,
            nb_filters=NB_FILTERS,
            FFN_units=FFN_UNITS,
            nb_classes=NB_CLASSES,
            dropout_rate=DROPOUT_RATE)

if NB_CLASSES == 2:
    Dcnn.compile(loss="binary_crossentropy",
                 optimizer="adam",
                 metrics=["accuracy"])
else:
    Dcnn.compile(loss="sparse_categorical_crossentropy",
                 optimizer="adam",
                 metrics=["sparse_categorical_accuracy"])

checkpoint_path = "./drive/My Drive/ckpt/"
 
ckpt = tf.train.Checkpoint(Dcnn=Dcnn)
 
ckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)
 
if ckpt_manager.latest_checkpoint:
    ckpt.restore(ckpt_manager.latest_checkpoint)
    print("Latest checkpoint restored!!")

Dcnn.fit(data_inputs,
         data_labels,
         batch_size=BATCH_SIZE,
         epochs=NB_EPOCHS)
ckpt_manager.save()

"""Evaluation"""

Dcnn.evaluate(test_inputs, test_labels, batch_size=BATCH_SIZE)

"""Finalizing the model"""

Text_req =str(input("enter the Text for Analysis"))
 
analysis = Dcnn(np.array([tokenizer.encode(Text_req)]), training=False).numpy()
print(Loading the Analysis ##################.......)
 
print(analysis)
if analysis > 0.5:
  print("Postive")
elif analysis=0.5:
  print("Neutral")
else:
  print("Negative")